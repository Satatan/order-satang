// Code generated by MockGen. DO NOT EDIT.
// Source: ./custom_gorm.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	sql "database/sql"
	database "order_satang/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomGorm is a mock of CustomGorm interface.
type MockCustomGorm struct {
	ctrl     *gomock.Controller
	recorder *MockCustomGormMockRecorder
}

// MockCustomGormMockRecorder is the mock recorder for MockCustomGorm.
type MockCustomGormMockRecorder struct {
	mock *MockCustomGorm
}

// NewMockCustomGorm creates a new mock instance.
func NewMockCustomGorm(ctrl *gomock.Controller) *MockCustomGorm {
	mock := &MockCustomGorm{ctrl: ctrl}
	mock.recorder = &MockCustomGormMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomGorm) EXPECT() *MockCustomGormMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCustomGorm) Count(value *int64) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockCustomGormMockRecorder) Count(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCustomGorm)(nil).Count), value)
}

// Create mocks base method.
func (m *MockCustomGorm) Create(value interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomGormMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomGorm)(nil).Create), value)
}

// Debug mocks base method.
func (m *MockCustomGorm) Debug() database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockCustomGormMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockCustomGorm)(nil).Debug))
}

// Delete mocks base method.
func (m *MockCustomGorm) Delete(value interface{}, where ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomGormMockRecorder) Delete(value interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomGorm)(nil).Delete), varargs...)
}

// Error mocks base method.
func (m *MockCustomGorm) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockCustomGormMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockCustomGorm)(nil).Error))
}

// Find mocks base method.
func (m *MockCustomGorm) Find(out interface{}, where ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockCustomGormMockRecorder) Find(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCustomGorm)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockCustomGorm) First(out interface{}, where ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockCustomGormMockRecorder) First(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCustomGorm)(nil).First), varargs...)
}

// Group mocks base method.
func (m *MockCustomGorm) Group(query string) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", query)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockCustomGormMockRecorder) Group(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockCustomGorm)(nil).Group), query)
}

// Having mocks base method.
func (m *MockCustomGorm) Having(query interface{}, values ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockCustomGormMockRecorder) Having(query interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockCustomGorm)(nil).Having), varargs...)
}

// Joins mocks base method.
func (m *MockCustomGorm) Joins(query string, args ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockCustomGormMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockCustomGorm)(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockCustomGorm) Last(out interface{}, where ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockCustomGormMockRecorder) Last(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockCustomGorm)(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockCustomGorm) Limit(limit int) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockCustomGormMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockCustomGorm)(nil).Limit), limit)
}

// Model mocks base method.
func (m *MockCustomGorm) Model(value interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockCustomGormMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockCustomGorm)(nil).Model), value)
}

// Offset mocks base method.
func (m *MockCustomGorm) Offset(offset int) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockCustomGormMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockCustomGorm)(nil).Offset), offset)
}

// Omit mocks base method.
func (m *MockCustomGorm) Omit(columns ...string) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockCustomGormMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockCustomGorm)(nil).Omit), columns...)
}

// Or mocks base method.
func (m *MockCustomGorm) Or(query interface{}, args ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockCustomGormMockRecorder) Or(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockCustomGorm)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockCustomGorm) Order(value interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockCustomGormMockRecorder) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockCustomGorm)(nil).Order), value)
}

// Pluck mocks base method.
func (m *MockCustomGorm) Pluck(column string, value interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockCustomGormMockRecorder) Pluck(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockCustomGorm)(nil).Pluck), column, value)
}

// Preload mocks base method.
func (m *MockCustomGorm) Preload(column string, conditions ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{column}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockCustomGormMockRecorder) Preload(column interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockCustomGorm)(nil).Preload), varargs...)
}

// Raw mocks base method.
func (m *MockCustomGorm) Raw(sql string, values ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockCustomGormMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockCustomGorm)(nil).Raw), varargs...)
}

// Rows mocks base method.
func (m *MockCustomGorm) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockCustomGormMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockCustomGorm)(nil).Rows))
}

// RowsAffected mocks base method.
func (m *MockCustomGorm) RowsAffected() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockCustomGormMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockCustomGorm)(nil).RowsAffected))
}

// Save mocks base method.
func (m *MockCustomGorm) Save(value interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCustomGormMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCustomGorm)(nil).Save), value)
}

// Scan mocks base method.
func (m *MockCustomGorm) Scan(dest interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockCustomGormMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockCustomGorm)(nil).Scan), dest)
}

// Select mocks base method.
func (m *MockCustomGorm) Select(query interface{}, args ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockCustomGormMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockCustomGorm)(nil).Select), varargs...)
}

// Table mocks base method.
func (m *MockCustomGorm) Table(name string) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", name)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockCustomGormMockRecorder) Table(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockCustomGorm)(nil).Table), name)
}

// Take mocks base method.
func (m *MockCustomGorm) Take(out interface{}, where ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockCustomGormMockRecorder) Take(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockCustomGorm)(nil).Take), varargs...)
}

// Transaction mocks base method.
func (m *MockCustomGorm) Transaction(fc func(database.CustomGorm) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockCustomGormMockRecorder) Transaction(fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockCustomGorm)(nil).Transaction), fc)
}

// Update mocks base method.
func (m *MockCustomGorm) Update(column string, attrs interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, attrs)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomGormMockRecorder) Update(column, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomGorm)(nil).Update), column, attrs)
}

// Updates mocks base method.
func (m *MockCustomGorm) Updates(values interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockCustomGormMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockCustomGorm)(nil).Updates), values)
}

// Where mocks base method.
func (m *MockCustomGorm) Where(query interface{}, args ...interface{}) database.CustomGorm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(database.CustomGorm)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockCustomGormMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCustomGorm)(nil).Where), varargs...)
}
