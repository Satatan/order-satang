// Code generated by MockGen. DO NOT EDIT.
// Source: ./order.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	models "order_satang/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderUsecaseInterface is a mock of OrderUsecaseInterface interface.
type MockOrderUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUsecaseInterfaceMockRecorder
}

// MockOrderUsecaseInterfaceMockRecorder is the mock recorder for MockOrderUsecaseInterface.
type MockOrderUsecaseInterfaceMockRecorder struct {
	mock *MockOrderUsecaseInterface
}

// NewMockOrderUsecaseInterface creates a new mock instance.
func NewMockOrderUsecaseInterface(ctrl *gomock.Controller) *MockOrderUsecaseInterface {
	mock := &MockOrderUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockOrderUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUsecaseInterface) EXPECT() *MockOrderUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderUsecaseInterface) CreateOrder(data models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", data)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUsecaseInterfaceMockRecorder) CreateOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).CreateOrder), data)
}

// UpdateOrder mocks base method.
func (m *MockOrderUsecaseInterface) UpdateOrder(data models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", data)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderUsecaseInterfaceMockRecorder) UpdateOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).UpdateOrder), data)
}

// MockOrderRepositoryInterface is a mock of OrderRepositoryInterface interface.
type MockOrderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryInterfaceMockRecorder
}

// MockOrderRepositoryInterfaceMockRecorder is the mock recorder for MockOrderRepositoryInterface.
type MockOrderRepositoryInterfaceMockRecorder struct {
	mock *MockOrderRepositoryInterface
}

// NewMockOrderRepositoryInterface creates a new mock instance.
func NewMockOrderRepositoryInterface(ctrl *gomock.Controller) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepositoryInterface) CreateOrder(data models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", data)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryInterfaceMockRecorder) CreateOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).CreateOrder), data)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepositoryInterface) UpdateOrder(data models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", data)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryInterfaceMockRecorder) UpdateOrder(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).UpdateOrder), data)
}
